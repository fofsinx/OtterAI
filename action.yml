name: '🦦 Dr. OtterAI Code Review, PhD'
description: '🤖 AI-powered code reviews for pull requests using GPT models, by a smart otter with a PhD! 🎓'
author: 'fofsinx'

branding:
  icon: 'code'
  color: 'yellow'

inputs:
  provider:
    description: 'LLM provider to use (openai, gemini, groq, or mistral)'
    required: false
    default: 'openai'
  
  # OpenAI settings
  openai_api_key:
    description: 'OpenAI API key (required if using OpenAI)'
    required: false
  openai_base_url:
    description: 'OpenAI API base URL (optional)'
    required: false
    default: 'https://api.openai.com/v1'
  
  # Google Gemini settings
  google_api_key:
    description: 'Google API key (required if using Gemini)'
    required: false
  
  # Groq settings
  groq_api_key:
    description: 'Groq API key (required if using Groq)'
    required: false
  
  # Mistral settings
  mistral_api_key:
    description: 'Mistral API key (required if using Mistral)'
    required: false
  
  # Common settings
  github_token:
    description: 'GitHub token for PR access'
    required: true
    default: ${{ github.token }}
  extra_prompt:
    description: 'Additional instructions for the AI reviewer'
    required: false
    default: ''
  model:
    description: 'Model to use (provider-specific, e.g., gpt-4-turbo-preview for OpenAI, gemini-pro for Google)'
    required: false
    default: ''

runs:
  using: 'composite'
  steps:
    - name: Check if review is requested
      shell: bash
      env:
        PR_TITLE: ${{ github.event.pull_request.title }}
        PATTERN: \b(?:(?:no|skip)-(?:review|otter|otterai)|otter-(?:no|bye|restricted))(?:,(?:(?:no|skip)-(?:review|otter|otterai)|otter-(?:no|bye|restricted)))*\b
      run: |
        if echo "$PR_TITLE" | grep -Eiq "$PATTERN"; then
          echo "🦦 No review requested, skipping code review"
          echo "code_review_requested=false" >> $GITHUB_OUTPUT
        else
          echo "🔍 Code review requested"
          echo "code_review_requested=true" >> $GITHUB_OUTPUT
        fi

    - name: Check if PR is merged
      shell: bash
      env:
        PR_STATE: ${{ github.event.pull_request.state }}
        PATTERN: \b(?:merged|closed)\b
      run: |
        if echo "$PR_STATE" | grep -Eiq "$PATTERN"; then
          echo "🦦 PR is merged, skipping code review"
          echo "pr_merged=true" >> $GITHUB_OUTPUT
        else
          echo "🔍 PR is not merged, proceeding with code review"
          echo "pr_merged=false" >> $GITHUB_OUTPUT
        fi
    - name: Set up Python
      uses: actions/setup-python@v5
      if: steps.check_if_review_requested.outputs.code_review_requested != 'true' || steps.check_if_pr_merged.outputs.pr_merged != 'true'
      with:
        python-version: '3.12'
        cache: 'pip'
    
    - name: Install dependencies
      if: steps.check_if_review_requested.outputs.code_review_requested != 'true' || steps.check_if_pr_merged.outputs.pr_merged != 'true'
      shell: bash
      run: |
        python -m pip install --upgrade pip
        pip install -r ${{ github.action_path }}/requirements.txt

    - name: Run OtterAI Code Review
      shell: bash
      if: steps.check_if_review_requested.outputs.code_review_requested != 'true' || steps.check_if_pr_merged.outputs.pr_merged != 'true'
      env:
        INPUT_PROVIDER: ${{ inputs.provider }}
        # OpenAI
        INPUT_OPENAI_API_KEY: ${{ inputs.openai_api_key }}
        INPUT_OPENAI_BASE_URL: ${{ inputs.openai_base_url }}
        # Google
        INPUT_GOOGLE_API_KEY: ${{ inputs.google_api_key }}
        # Groq
        INPUT_GROQ_API_KEY: ${{ inputs.groq_api_key }}
        # Mistral
        INPUT_MISTRAL_API_KEY: ${{ inputs.mistral_api_key }}
        # Common
        INPUT_GITHUB_TOKEN: ${{ inputs.github_token }}
        INPUT_MODEL: ${{ inputs.model }}
        INPUT_EXTRA_PROMPT: ${{ inputs.extra_prompt }}
        GITHUB_REPOSITORY: ${{ github.repository }}
        GITHUB_EVENT_NUMBER: ${{ github.event.number }}
        GITHUB_WORKSPACE: ${{ github.workspace }}
      run: |
        python -m otterai.main