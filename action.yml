name: 'ü¶¶ Dr. OtterAI Code Review, PhD'
description: 'ü§ñ AI-powered code reviews for pull requests using GPT models, by a smart otter with a PhD! üéì'
author: 'fofsinx'

branding:
  icon: 'code'
  color: 'yellow'

inputs:
  provider:
    description: 'LLM provider to use (openai, gemini, groq, or mistral)'
    required: false
    default: 'openai'
  
  # OpenAI settings
  openai_api_key:
    description: 'OpenAI API key (required if using OpenAI)'
    required: false
  openai_base_url:
    description: 'OpenAI API base URL (optional)'
    required: false
    default: 'https://api.openai.com/v1'
  
  # Google Gemini settings
  google_api_key:
    description: 'Google API key (required if using Gemini)'
    required: false
  
  # Groq settings
  groq_api_key:
    description: 'Groq API key (required if using Groq)'
    required: false
  
  # Mistral settings
  mistral_api_key:
    description: 'Mistral API key (required if using Mistral)'
    required: false
  
  # Common settings
  github_token:
    description: 'GitHub token for PR access'
    required: false
    default: ${{ github.token }}
  extra_prompt:
    description: 'Additional instructions for the AI reviewer'
    required: false
    default: ''
  model:
    description: 'Model to use (provider-specific, e.g., gpt-4-turbo-preview for OpenAI, gemini-pro for Google)'
    required: false
    default: ''
  skip_fixes:
    description: 'Skip fix generation. Use this option if you want to bypass automatic fixes for the code.'
    required: false
    default: 'false'
  skip_generated_pr_review:
    description: 'Skip generated PR review. This option allows you to skip the review of automatically generated pull requests.'
    required: false
    default: 'true'

runs:
  using: 'composite'
  steps:
    - name: Check if review is requested
      id: check_if_review_requested
      shell: python
      env:
        PR_TITLE: ${{ github.event.pull_request.title }}
        PR_DESCRIPTION: ${{ github.event.pull_request.body }}
        PR_STATE: ${{ github.event.pull_request.state }}
        MERGE_PATTERN: \b(?:merged|closed)\b
        BRANCH_NAME: ${{ github.event.pull_request.head.ref }}
        BRANCH_NAME_PATTERN: \b(?:otterai/fixes-for-pr-\d+)\b
        PATTERN: \b((?:no|skip)-(?:review|otter|otterai)|otter-(?:no|bye|restricted))(?:,((?:no|skip)-(?:review|otter|otterai)|otter-(?:no|bye|restricted)))*\b
      run: |
        import os
        import re

        pr_title = os.environ['PR_TITLE']
        pattern = os.environ['PATTERN']
        pr_description = os.environ['PR_DESCRIPTION']
        merge_pattern = os.environ['MERGE_PATTERN']
        pr_state = os.environ['PR_STATE']
        branch_name = os.environ['BRANCH_NAME']
        branch_name_pattern = os.environ['BRANCH_NAME_PATTERN']

        if re.search(pattern, pr_title, re.IGNORECASE) or re.search(merge_pattern, pr_state, re.IGNORECASE) or re.search(pattern, pr_description, re.IGNORECASE) or re.search(branch_name_pattern, branch_name, re.IGNORECASE):
            print("ü¶¶ No review requested, skipping code review")
            with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                f.write("code_review_requested=false\n")
        else:
            print("üîç Code review requested")
            with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                f.write("code_review_requested=true\n")
   
    - name: Echo code review requested
      shell: bash
      run: |
        echo "Code review requested: ${{ steps.check_if_review_requested.outputs.code_review_requested }}"

    -