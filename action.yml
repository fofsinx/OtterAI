name: '‚ú® CoriAI Code Review, PhD'
description: 'ü§ñ AI-powered code reviews for pull requests using LLMs, by a smart human with a PhD! üéì'
author: 'theboringhumane'

branding:
  icon: 'anchor'
  color: 'purple'

inputs:
  provider:
    description: 'LLM provider to use (openai, gemini, groq, or mistral)'
    required: false
    default: 'openai'
  
  # OpenAI settings
  openai_api_key:
    description: 'OpenAI API key (required if using OpenAI)'
    required: false
  openai_base_url:
    description: 'OpenAI API base URL (optional)'
    required: false
    default: 'https://api.openai.com/v1'
  
  # Google Gemini settings
  google_api_key:
    description: 'Google API key (required if using Gemini)'
    required: false
  
  # Groq settings
  groq_api_key:
    description: 'Groq API key (required if using Groq)'
    required: false
  
  # Mistral settings
  mistral_api_key:
    description: 'Mistral API key (required if using Mistral)'
    required: false
  
  # Common settings
  github_token:
    description: 'GitHub token for PR access'
    required: false
    default: ${{ github.token }}
  extra_prompt:
    description: 'Additional instructions for the AI reviewer'
    required: false
    default: ''
  model:
    description: 'Model to use (provider-specific, e.g., gpt-4-turbo-preview for OpenAI, gemini-pro for Google)'
    required: false
    default: ''

runs:
  using: 'composite'
  steps:
    - name: Check if review is requested
      id: check_if_review_requested
      shell: python
      env:
        PR_TITLE: ${{ github.event.pull_request.title }}
        PR_DESCRIPTION: ${{ github.event.pull_request.body }}
        PR_STATE: ${{ github.event.pull_request.state }}
        MERGE_PATTERN: \b(?:merged|closed)\b
        PATTERN: \b((?:no|skip)-(?:review|cori|coriai)|cori-(?:no|bye|restricted))(?:,((?:no|skip)-(?:review|cori|coriai)|cori-(?:no|bye|restricted)))*\b
      run: |
        import os
        import re

        pr_title = os.environ['PR_TITLE']
        pattern = os.environ['PATTERN']
        pr_description = os.environ['PR_DESCRIPTION']
        merge_pattern = os.environ['MERGE_PATTERN']
        pr_state = os.environ['PR_STATE']

        if re.search(pattern, pr_title, re.IGNORECASE) or re.search(merge_pattern, pr_state, re.IGNORECASE) or re.search(pattern, pr_description, re.IGNORECASE):
            print("ü¶¶ No review requested, skipping code review")
            with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                f.write("code_review_requested=false\n")
        else:
            print("üîç Code review requested")
            with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                f.write("code_review_requested=true\n")
   
    - name: Echo code review requested
      shell: bash
      run: |
        echo "Code review requested: ${{ steps.check_if_review_requested.outputs.code_review_requested }}"

    - name: Add skip comment if review is skipped
      if: steps.check_if_review_requested.outputs.code_review_requested == 'false'
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
        GITHUB_REPOSITORY: ${{ github.repository }}
        PR_NUMBER: ${{ github.event.number }}
        COMMENT: "Hey @${{ github.event.pull_request.user.login }}! ü¶¶ Code review skipped based on PR title/description pattern or PR state. Hope you have a great day! üêû"
      run: |
        # First check if comment already exists
        EXISTING_COMMENTS=$(curl -L \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer $GITHUB_TOKEN" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          "https://api.github.com/repos/$GITHUB_REPOSITORY/issues/$PR_NUMBER/comments?since=${{ github.event.pull_request.created_at }}")
        
        if ! echo "$EXISTING_COMMENTS" | grep -q "$COMMENT"; then
          # Comment doesn't exist, so create it
          curl -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "https://api.github.com/repos/$GITHUB_REPOSITORY/issues/$PR_NUMBER/comments" \
            -d "{\"body\":\"$COMMENT\"}"
        else
          echo "Skip comment already exists"
        fi
    
    - name: Create empty files
      shell: bash
      run: |
        touch requirements.txt
        
    - name: Set up Python
      uses: actions/setup-python@v5
      if: steps.check_if_review_requested.outputs.code_review_requested == 'true'
      with:
        python-version: '3.12'
        cache: 'pip'
    
    - name: Install dependencies
      if: steps.check_if_review_requested.outputs.code_review_requested == 'true'
      shell: bash
      run: |
        python -m pip install --upgrade pip
        pip install cori-ai

    - name: Run CoriAI Code Review
      shell: bash
      if: steps.check_if_review_requested.outputs.code_review_requested == 'true'
      env:
        INPUT_PROVIDER: ${{ inputs.provider }}
        # OpenAI
        INPUT_OPENAI_API_KEY: ${{ inputs.openai_api_key }}
        INPUT_OPENAI_BASE_URL: ${{ inputs.openai_base_url }}
        # Google
        INPUT_GOOGLE_API_KEY: ${{ inputs.google_api_key }}
        # Groq
        INPUT_GROQ_API_KEY: ${{ inputs.groq_api_key }}
        # Mistral
        INPUT_MISTRAL_API_KEY: ${{ inputs.mistral_api_key }}
        # Common
        INPUT_GITHUB_TOKEN: ${{ inputs.github_token }}
        INPUT_MODEL: ${{ inputs.model }}
        INPUT_EXTRA_PROMPT: ${{ inputs.extra_prompt }}
        GITHUB_REPOSITORY: ${{ github.repository }}
        GITHUB_EVENT_NUMBER: ${{ github.event.number }}
        GITHUB_WORKSPACE: ${{ github.workspace }}
      run: |
        python -m cori_ai.main